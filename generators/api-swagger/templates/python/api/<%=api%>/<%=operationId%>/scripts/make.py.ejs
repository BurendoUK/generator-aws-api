import shutil
from contextlib import contextmanager
from functools import cache
from pathlib import Path
from typing import Generator, List
import sh

DIST_DIR = "dist"
BUILD_DIR = "build"
UNNECESSARY_DIRS = ["__pycache__", "*.dist-info", "*tests", ".venv", "Pipfile", "Pipfile.lock"]


@cache
def get_lambda_base_dir() -> Path:
    return Path(__file__).parent.parent


@cache
def get_dist_dir() -> Path:
    root_dir = get_lambda_base_dir()
    return root_dir / DIST_DIR


def ignore_build_dirs(path: str, _contents: List[str]) -> List[str]:
    if path == str(get_lambda_base_dir()):
        return ['dist', 'scripts', *UNNECESSARY_DIRS]
    return UNNECESSARY_DIRS


def copy_source_code(source_dir: Path, build_dir: Path):
    shutil.copytree(src=source_dir, dst=build_dir, ignore=ignore_build_dirs)


def clean_build_dir(build_dir: Path):
    if build_dir.exists():
        shutil.rmtree(build_dir)
    build_dir.mkdir(parents=True)


def zip_package(build_dir: str, format="zip"):
    archive_path = Path(f"{str(build_dir)}.{format}")
    if archive_path.exists():
        archive_path.unlink()
    shutil.make_archive(base_name=build_dir, format=format, root_dir=build_dir)


@contextmanager
def create_zip_package(package_name: str) -> Generator[Path, None, None]:
    dist_dir = get_dist_dir()
    build_dir = get_dist_dir() / BUILD_DIR

    clean_build_dir(build_dir=dist_dir)
    dist_dir.mkdir(parents=True, exist_ok=True)

    print(f"Building {package_name}")
    yield build_dir
    zip_package(build_dir)
    shutil.move(dist_dir / f"{BUILD_DIR}.zip", dist_dir / f"{package_name}.zip")


@contextmanager
def create_temp_path(path: Path, is_dir: bool) -> Generator[Path, None, None]:
    error = None
    try:
        if is_dir:
            path.mkdir(parents=True)
        else:
            path.touch()
        yield
    except Exception as err:
        error = err
    finally:
        pass
        if is_dir:
            shutil.rmtree(path)
        else:
            path.unlink()
    if error:
        raise error


def clean_unnecessary_files(directory: Path):
    for pattern in UNNECESSARY_DIRS:
        for filename in Path(directory).glob(pattern):
            if filename.is_dir():
                shutil.rmtree(filename)
            else:
                filename.unlink()


def build():
    lambda_basedir = get_lambda_base_dir()
    package_name = lambda_basedir.name

    with create_zip_package(package_name=package_name) as build_dir:
        copy_source_code(source_dir=lambda_basedir, build_dir=build_dir)
        requirements_txt_path = lambda_basedir / "requirements.txt"
        with create_temp_path(path=requirements_txt_path, is_dir=False):
            requirements = sh.pipenv("requirements", _cwd=lambda_basedir)
            with open(requirements_txt_path, "w") as f:
                data_split = str(requirements).split('\n')
                f.write('\n'.join(data_split[:-1]))
            sh.pipenv("run", "pip", "install", "--upgrade", "-r", requirements_txt_path, "--target", build_dir,
                      _cwd=lambda_basedir)
        clean_unnecessary_files(build_dir)


if __name__ == "__main__":
    build()
