resource "aws_iam_instance_profile" "gitlab_runner" {
  name = "${local.prefix}-gitlab-runner"
  role = aws_iam_role.gitlab_runner.name
}


resource "aws_iam_role" "gitlab_runner" {
  name = "${local.prefix}-gitlab-runner"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      }
    ]
  })
}

# Allow for s3 shared cache
module "gitlab_runner_s3_cache" {
  source    = "./iam-policy"
  name      = "${local.prefix}-gitlab-runner-s3-cache"
  role_name = aws_iam_role.gitlab_runner.name
  iam_permissions = [
    {
      Action = [
        "s3:*"
      ]
      Effect = "Allow"
      Resource = [
        aws_s3_bucket.gitlab_runner.arn,
        "${aws_s3_bucket.gitlab_runner.arn}/*"
      ]
    }
  ]
}

# Allow read secrets
module "gitlab_runner_secrets" {
  source    = "./iam-policy"
  name      = "${local.prefix}-gitlab-runner-secrets"
  role_name = aws_iam_role.gitlab_runner.name
  iam_permissions = [
    {
      Action = [
        "secretsmanager:Get*"
      ]
      Effect = "Allow"
      Resource = [
        aws_secretsmanager_secret.gitlab_runner.arn
      ]
    }
  ]
}

# Allow read tf state
module "gitlab_runner_tf_state" {
  source    = "./iam-policy"
  name      = "${local.prefix}-gitlab-runner-tf-state"
  role_name = aws_iam_role.gitlab_runner.name
  iam_permissions = [
    {
      Action = [
        "s3:PutObject",
        "s3:DeleteObject",
        "s3:GetObject",
        "dynamodb:PutItem",
        "dynamodb:GetItem",
        "dynamodb:DeleteItem",
        "s3:ListBucket"
      ]
      Effect = "Allow"
      Resource = [
        data.aws_dynamodb_table.terraform_state_lock.arn,
        data.aws_s3_bucket.terraform_state.arn,
        "${data.aws_s3_bucket.terraform_state.arn}/*"
      ]
    }
  ]
}


# Allow assume terraform role
module "gitlab_runner_tf_assume_role" {
  source    = "./iam-policy"
  name      = "${local.prefix}-gitlab-runner-tf-assume-role"
  role_name = aws_iam_role.gitlab_runner.name
  iam_permissions = [
    {
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Resource = [
        "arn:aws:iam::${var.dev_account_id}:role/${var.terraform_role_name}",
        "arn:aws:iam::${var.test_account_id}:role/${var.terraform_role_name}",
        "arn:aws:iam::${var.prod_account_id}:role/${var.terraform_role_name}"
      ]
    }
  ]
}

# ecr power user
resource "aws_iam_policy_attachment" "gitlab_runner_ecr" {
  name       = "${local.prefix}-gitlab-runner-ecr-power-user"
  policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser"
  roles = [
    aws_iam_role.gitlab_runner.name
  ]
}

# aws session manager
resource "aws_iam_policy_attachment" "gitlab_runner_session_manager" {
  name       = "${local.prefix}-gitlab-runner-session-manager"
  policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
  roles = [
    aws_iam_role.gitlab_runner.name
  ]
}

# aws session manager cloudwatch logs
module "gitlab_runner_session_logs" {
  source    = "./iam-policy"
  name      = "${local.prefix}-gitlab-runner-session-logs"
  role_name = aws_iam_role.gitlab_runner.name
  iam_permissions = [
    {
      Action = [
        "logs:PutLogEvents",
        "logs:CreateLogStream",
        "logs:DescribeLogGroups",
        "logs:DescribeLogStreams",
      ]
      Effect   = "Allow"
      Resource = ["*"]
    },
    {
      Action = [
        "kms:DescribeKey",
        "kms:GenerateDataKey",
        "kms:Decrypt",
        "kms:Encrypt",
      ]
      Effect = "Allow"
      Resource = [
        aws_kms_key.ec2_session_logs.arn
      ]
    }
  ]
}