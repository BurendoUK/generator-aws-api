import shutil
from contextlib import contextmanager
from functools import cache
from pathlib import Path
from typing import Generator, List


DIST_DIR = "dist"
BUILD_DIR = "build"
UNNECESSARY_DIRS = ["__pycache__", "*.dist-info", "*tests"]


@cache
def get_lambda_base_dir() -> Path:
    return Path(__file__).parent.parent


@cache
def get_dist_dir() -> Path:
    root_dir = get_lambda_base_dir()
    return root_dir / DIST_DIR


def ignore_build_dirs(path: str, _contents: List[str]) -> List[str]:
    if path == str(get_lambda_base_dir()):
        return ['dist', 'scripts', *UNNECESSARY_DIRS]
    return UNNECESSARY_DIRS


def copy_source_code(source_dir: Path, build_dir: Path):
    shutil.copytree(src=source_dir, dst=build_dir, ignore=ignore_build_dirs)


def clean_build_dir(build_dir: Path):
    if build_dir.exists():
        shutil.rmtree(build_dir)
    build_dir.mkdir(parents=True)


def zip_package(build_dir: str, format="zip"):
    archive_path = Path(f"{str(build_dir)}.{format}")
    if archive_path.exists():
        archive_path.unlink()
    shutil.make_archive(base_name=build_dir, format=format, root_dir=build_dir)


@contextmanager
def create_zip_package(package_name: str) -> Generator[Path, None, None]:
    dist_dir = get_dist_dir()
    build_dir = dist_dir / BUILD_DIR
    layer_base_dir = build_dir / "python" / "layer"
    package_dir = layer_base_dir / package_name

    clean_build_dir(build_dir=dist_dir)
    layer_base_dir.mkdir(parents=True, exist_ok=True)

    print(f"Building {package_name}")
    yield package_dir
    zip_package(build_dir)
    shutil.move(dist_dir / f"{BUILD_DIR}.zip", dist_dir / f"{package_name}.zip")


def build():
    lambda_basedir = get_lambda_base_dir()
    package_name = lambda_basedir.name

    with create_zip_package(package_name=package_name) as build_dir:
        copy_source_code(source_dir=lambda_basedir, build_dir=build_dir)


if __name__ == "__main__":
    build()
